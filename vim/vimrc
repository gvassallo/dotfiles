
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" let Vundle manage Vundle, required
Bundle "gmarik/Vundle.vim"
" Git wrapper
Bundle "tpope/vim-fugitive"
" Set of snippets
Bundle "honza/vim-snippets"
" Vim status line
Bundle "bling/vim-airline"
" Bookmarks
Bundle "MattesGroeger/vim-bookmarks"
" Nerd Tree
Bundle "scrooloose/nerdtree"
" Fuzzy search
Bundle "haya14busa/incsearch.vim"
Bundle "haya14busa/incsearch-fuzzy.vim"
" Auto brackets "
Bundle "Raimondi/delimitMate"
" Autocompletion for javascript
Bundle "marijnh/tern_for_vim"
" tcomment_vim
Bundle "tomtom/tcomment_vim"
" Vim tmux plugin
Bundle "tmux-plugins/vim-tmux"
" LaTeX support for vim
" Bundle "lervag/vimtex"
" Dark powered asynchronous unite all interfaces for Neovim/Vim8
Bundle "Shougo/denite.nvim"
" Unite plugin for most recently used files
Bundle "Shougo/neomru.vim"
" Devicons
Bundle "ryanoasis/vim-devicons"
" JSX support for vim
Bundle "mxw/vim-jsx"
" Asynchronous syntax checker
Bundle "benekastah/neomake"
" Visualize undo tree
Bundle "simnalamburt/vim-mundo"
" Support to javascript libraries
Bundle "othree/javascript-libraries-syntax.vim"
" Highlight JSON syntax
Bundle "elzr/vim-json"
" Quoting/Parenthesizing made simple
Bundle "Konfekt/FastFold"
" A simple alignment operator for Vim text editor
Bundle "tommcdo/vim-lion"
" Run your tests at the speed of thought
Bundle "janko-m/vim-test"
" Vim/Ruby Configuration Files
Bundle "vim-ruby/vim-ruby"
" Dark powered asynchronous completion framework for neovim/Vim8
Bundle "Shougo/deoplete.nvim"
" deoplete.nvim source for javascript
Bundle "carlitux/deoplete-ternjs"
" Asynchronous Go completion for Neovim. deoplete source for Go.
Bundle "zchee/deoplete-go"
" Run Rspec specs from Vim
Bundle "tbodt/deoplete-tabnine"
Bundle "thoughtbot/vim-rspec"
" Refactoring tool for Ruby in vim!
Bundle "ecomba/vim-ruby-refactoring"
" extended % matching for HTML, LaTeX, and many other languages
Bundle "vim-scripts/matchit.zip"
" Vim plugin for the Perl module / CLI script 'ack'
Bundle "mileszs/ack.vim"
" CoffeeScript support for vim
Bundle "kchmck/vim-coffee-script"
" An asynchronous markdown preview plugin for Vim and Neovim
Bundle "euclio/vim-markdown-composer"
" Adaptation of one-light and one-dark colorschemes for Vim
Bundle "rakr/vim-one"
" surround.vim: quoting/parenthesizing made simple
Bundle "tpope/vim-surround"
" Vim filetype and tools support for Crystal language.
Bundle "rhysd/vim-crystal"
" A vim plugin to toggle memoization in ruby
Bundle "victormours/ruby-memoize.vim"
" Kotlin plugin for Vim
Bundle "udalov/kotlin-vim"
" Intellisense engine for vim8 & neovim
" Bundle "neoclide/coc.nvim"
" A Vim plugin that provides GraphQL file detection, syntax highlighting, and indentation.
Bundle "jparise/vim-graphql"
" Syntax highlighting for thrift definition files.
Bundle "solarnz/thrift.vim"
" Distraction-free writing in Vim
Bundle "junegunn/goyo.vim"
" Rethinking Vim as a tool for writing
Bundle "reedes/vim-pencil"
" Hyperfocus-writing in Vim.
Bundle "junegunn/limelight.vim"
" basic vim/terraform integration
Bundle "'hashivim/vim-terraform'"
" Typescript syntax files for Vim
Bundle "leafgarland/typescript-vim"
" React JSX syntax highlighting for vim and Typescript
Bundle "peitalin/vim-jsx-typescript"
" Vim configuration files for Elixir
Bundle "elixir-editor"

call vundle#end()
filetype plugin indent on     " required
"
"================
"GENERAL SETTINGS
"================
"
set textwidth=130
set showbreak=\ \
inoremap {<CR> {<CR>}<C-o>O
set nocompatible              " be iMproved, required
filetype off                  " required
set mouse=a
inoremap jj <esc>
nnoremap <leader>h :nohlsearch<CR>
command! Ind execute "normal gg=G"
set list
set listchars=tab:▸\ ,eol:¬
syntax on

set number
set relativenumber

set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set foldmethod=syntax
set backspace=indent,eol,start
set textwidth=90
set colorcolumn=+1

set wildmenu

" Spelling

set nospell
set spelllang=en
set spellsuggest=5

let g:airline_left_sep="›"  " Slightly fancier than ">"
let g:airline_right_sep="‹" " Slightly fancier than "<"
let g:airline_powerline_fonts = 1

set termguicolors
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
let g:onedark_termcolors = 256

colorscheme one
set background=dark

" Search options

set hlsearch
set incsearch
set ignorecase

hi clear Search
hi Search ctermfg=168 ctermbg=59 gui=bold guifg=#e06c75 guibg=#5c6370


if has('nvim')
    set inccommand=split
endif


hi MatchParen ctermbg=red guibg=lightblue
highlight Pmenu ctermbg=7 ctermfg=0
highlight PmenuSel ctermfg=0 ctermbg=7
set laststatus=2

set nofoldenable    " disable folding
"React support
let g:jsx_ext_required = 1
let g:javascript_enable_domhtmlcss = 1

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"
"========
"DEOPLETE
"=========
"
" Use deoplete
let g:deoplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" set sources
call deoplete#custom#option('sources', {
		\ '_': ['buffer', 'tabnine'],
        \ 'cpp': ['LanguageClient'],
        \ 'python': ['LanguageClient'],
        \ 'python3': ['LanguageClient'],
        \ 'rust': ['LanguageClient'],
        \ 'c': ['LanguageClient'],
		\})
" tern
if exists('g:plugs["tern_for_vim"]')
  " let g:tern_show_argument_hints = 'on_hold'
  " let g:tern_show_signature_in_pum = 1
  autocmd FileType javascript setlocal omnifunc=tern#Complete
endif
" tern
autocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>
"
"=======
"NEOMAKE
"=======
"
" let g:neomake_open_list = 2
let g:neomake_javascript_enabled_makers = ["eslint"]
let g:neomake_typescript_enabled_makers = ["tslint"]
" Disable Neomake for C files, there is YCM already
let g:neomake_c_enabled_makers = []
" call neomake#configure#automake('w')
"
"=====
"Denite
"=====
" set up coolguy arrow prompt
let g:denite_prompt = "➜ "
nnoremap <Leader>f :Denite file/rec -start-filter<CR>
nnoremap <Leader>b :Denite buffer<CR>
nnoremap <Leader>g :Denite grep:. <CR>
nnoremap <Leader>q :Denite -buffer-name=mru file_mru<CR>

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

call denite#custom#var('file/rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#source('file/rec', 'max_candidates', 200)

hi link deniteMatchedChar Special

"
"=====
"RSPEC
"=====
"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
let g:rspec_runner = "os_x_iterm2"
"
"=================
"RUBY REFACTORING
"=================
"
:nnoremap <leader>rap  :RAddParameter<cr>
:nnoremap <leader>rcpc :RConvertPostConditional<cr>
:nnoremap <leader>rel  :RExtractLet<cr>
:vnoremap <leader>rec  :RExtractConstant<cr>
:vnoremap <leader>relv :RExtractLocalVariable<cr>
:nnoremap <leader>rit  :RInlineTemp<cr>
:vnoremap <leader>rl   :RRenameLocalVariable<cr>
:vnoremap <leader>rv   :RRenameInstanceVariable<cr>
:vnoremap <leader>rem  :RExtractMethod<cr>
"
"========
"MAPPINGS
"========
"
" Fast saving
nmap <leader>w :w!<cr>
" nerd tree mapping
map <C-n> :NERDTreeToggle<CR>
" Java mappings
nmap <C-O> :JavaImportOrganize<CR>
nmap <C-U> :MundoToggle<CR>
" inchsearch mappings
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)

"===========
" COC NVIM
"===========
"
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

"
"============
"AUTOCOMMANDS
"============
"
" omnifuncs
augroup omnifuncs
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
augroup end

autocmd BufRead,BufNewFile *.tex set filetype=tex
autocmd BufRead,BufNewFile *.js set shiftwidth=2
autocmd BufRead,BufNewFile *.ts set shiftwidth=2
autocmd BufRead,BufNewFile *.rb set shiftwidth=2
autocmd BufRead,BufNewFile *.html set shiftwidth=2
autocmd BufRead,BufNewFile *.groovy set shiftwidth=2
autocmd BufNewFile,BufRead *.tsx,*.jsx set shiftwidth=2
autocmd BufRead,BufNewFile *.go set noexpandtab

command! FormatJson %!python -m json.tool

" Remove trailing whitespaces when saving files
fun! StripTrailingWhitespace()
    " Don't strip on these filetypes
    if &ft =~ 'markdown' || &ft =~ 'yaml'
        return
    endif
    %s/\s\+$//e
endfun
autocmd BufWritePre * call StripTrailingWhitespace()

let s:focused = 0
function! Focus()
  if s:focused == 0
    let s:focused = 1
    Goyo
    SoftPencil
    Limelight
  else
    let s:focused = 0
    Goyo!
    SoftPencil
    Limelight!
  endif
endfunction

command! Focus :call Focus()
